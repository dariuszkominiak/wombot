/* Auto-generated by genmsg_cpp for file /home/tscott/ros/wombot/wombot_msgs/msg/DrivetrainCommand.msg */
#ifndef WOMBOT_MSGS_MESSAGE_DRIVETRAINCOMMAND_H
#define WOMBOT_MSGS_MESSAGE_DRIVETRAINCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace wombot_msgs
{
template <class ContainerAllocator>
struct DrivetrainCommand_ {
  typedef DrivetrainCommand_<ContainerAllocator> Type;

  DrivetrainCommand_()
  : header()
  , gear(0)
  , front_diff(0)
  , rear_diff(0)
  {
  }

  DrivetrainCommand_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , gear(0)
  , front_diff(0)
  , rear_diff(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _gear_type;
  uint8_t gear;

  typedef uint8_t _front_diff_type;
  uint8_t front_diff;

  typedef uint8_t _rear_diff_type;
  uint8_t rear_diff;

  enum { NoChange = 0 };
  enum { LowRange = 1 };
  enum { HighRange = 2 };
  enum { NoChange = 0 };
  enum { Unlock = 1 };
  enum { Lock = 2 };

private:
  static const char* __s_getDataType_() { return "wombot_msgs/DrivetrainCommand"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "09da80225b8092c781124e80463cb389"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Wombot driveline control message\n\
\n\
# Used to select high range / low range and lock/unlock diffs\n\
\n\
Header header		# Standard ROS message header\n\
\n\
# Gears\n\
uint8 NoChange = 0\n\
uint8 LowRange = 1\n\
uint8 HighRange = 2\n\
\n\
# Diff\n\
uint8 NoChange = 0\n\
uint8 Unlock = 1\n\
uint8 Lock = 2\n\
\n\
uint8 gear		# requested gear number\n\
uint8 front_diff	# request diff status\n\
uint8 rear_diff		# requested diff status\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, gear);
    ros::serialization::serialize(stream, front_diff);
    ros::serialization::serialize(stream, rear_diff);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, gear);
    ros::serialization::deserialize(stream, front_diff);
    ros::serialization::deserialize(stream, rear_diff);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(gear);
    size += ros::serialization::serializationLength(front_diff);
    size += ros::serialization::serializationLength(rear_diff);
    return size;
  }

  typedef boost::shared_ptr< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DrivetrainCommand
typedef  ::wombot_msgs::DrivetrainCommand_<std::allocator<void> > DrivetrainCommand;

typedef boost::shared_ptr< ::wombot_msgs::DrivetrainCommand> DrivetrainCommandPtr;
typedef boost::shared_ptr< ::wombot_msgs::DrivetrainCommand const> DrivetrainCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wombot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09da80225b8092c781124e80463cb389";
  }

  static const char* value(const  ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x09da80225b8092c7ULL;
  static const uint64_t static_value2 = 0x81124e80463cb389ULL;
};

template<class ContainerAllocator>
struct DataType< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wombot_msgs/DrivetrainCommand";
  }

  static const char* value(const  ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Wombot driveline control message\n\
\n\
# Used to select high range / low range and lock/unlock diffs\n\
\n\
Header header		# Standard ROS message header\n\
\n\
# Gears\n\
uint8 NoChange = 0\n\
uint8 LowRange = 1\n\
uint8 HighRange = 2\n\
\n\
# Diff\n\
uint8 NoChange = 0\n\
uint8 Unlock = 1\n\
uint8 Lock = 2\n\
\n\
uint8 gear		# requested gear number\n\
uint8 front_diff	# request diff status\n\
uint8 rear_diff		# requested diff status\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.gear);
    stream.next(m.front_diff);
    stream.next(m.rear_diff);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DrivetrainCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wombot_msgs::DrivetrainCommand_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "front_diff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_diff);
    s << indent << "rear_diff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rear_diff);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WOMBOT_MSGS_MESSAGE_DRIVETRAINCOMMAND_H

