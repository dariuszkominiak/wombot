/* Auto-generated by genmsg_cpp for file /home/tscott/ros/wombot/wombot_node/msg/AckermannDriveStamped.msg */
#ifndef WOMBOT_NODE_MESSAGE_ACKERMANNDRIVESTAMPED_H
#define WOMBOT_NODE_MESSAGE_ACKERMANNDRIVESTAMPED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "wombot_node/AckermannDrive.h"

namespace wombot_node
{
template <class ContainerAllocator>
struct AckermannDriveStamped_ {
  typedef AckermannDriveStamped_<ContainerAllocator> Type;

  AckermannDriveStamped_()
  : header()
  , drive()
  {
  }

  AckermannDriveStamped_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , drive(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::wombot_node::AckermannDrive_<ContainerAllocator>  _drive_type;
   ::wombot_node::AckermannDrive_<ContainerAllocator>  drive;


private:
  static const char* __s_getDataType_() { return "wombot_node/AckermannDriveStamped"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1fd5d7f58889cefd44d29f6653240d0c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "## Time stamped drive command for robots with Ackermann steering.\n\
#  $Id: AckermannDriveStamped.msg 1958 2012-02-11 02:35:54Z jack.oquin $\n\
\n\
Header          header\n\
AckermannDrive  drive\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: wombot_node/AckermannDrive\n\
## Driving command for a car-like vehicle using Ackermann steering.\n\
#  $Id: AckermannDrive.msg 1966 2012-02-11 17:52:11Z jack.oquin $\n\
\n\
# Assumes Ackermann front-wheel steering. The left and right front\n\
# wheels are generally at different angles. To simplify, the commanded\n\
# angle corresponds to the yaw of a virtual wheel located at the\n\
# center of the front axle, like on a tricycle.  Positive yaw is to\n\
# the left. (This is *not* the angle of the steering wheel inside the\n\
# passenger compartment.)\n\
#\n\
# Zero steering angle velocity means change the steering angle as\n\
# quickly as possible. Positive velocity indicates a desired absolute\n\
# rate of change either left or right. The controller tries not to\n\
# exceed this limit in either direction, but sometimes it might.\n\
#\n\
float32 steering_angle          # desired virtual angle (radians)\n\
float32 steering_angle_velocity # desired rate of change (radians/s)\n\
\n\
# Drive at requested speed, acceleration and jerk (the 1st, 2nd and\n\
# 3rd derivatives of position). All are measured at the vehicle's\n\
# center of rotation, typically the center of the rear axle. The\n\
# controller tries not to exceed these limits in either direction, but\n\
# sometimes it might.\n\
#\n\
# Speed is the desired scalar magnitude of the velocity vector.\n\
# Direction is forward unless the sign is negative, indicating reverse.\n\
#\n\
# Zero acceleration means change speed as quickly as\n\
# possible. Positive acceleration indicates a desired absolute\n\
# magnitude; that includes deceleration.\n\
#\n\
# Zero jerk means change acceleration as quickly as possible. Positive\n\
# jerk indicates a desired absolute rate of acceleration change in\n\
# either direction (increasing or decreasing).\n\
#\n\
float32 speed                   # desired forward speed (m/s)\n\
float32 acceleration            # desired acceleration (m/s^2)\n\
float32 jerk                    # desired jerk (m/s^3)\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, drive);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, drive);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(drive);
    return size;
  }

  typedef boost::shared_ptr< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wombot_node::AckermannDriveStamped_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AckermannDriveStamped
typedef  ::wombot_node::AckermannDriveStamped_<std::allocator<void> > AckermannDriveStamped;

typedef boost::shared_ptr< ::wombot_node::AckermannDriveStamped> AckermannDriveStampedPtr;
typedef boost::shared_ptr< ::wombot_node::AckermannDriveStamped const> AckermannDriveStampedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wombot_node::AckermannDriveStamped_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wombot_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wombot_node::AckermannDriveStamped_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1fd5d7f58889cefd44d29f6653240d0c";
  }

  static const char* value(const  ::wombot_node::AckermannDriveStamped_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1fd5d7f58889cefdULL;
  static const uint64_t static_value2 = 0x44d29f6653240d0cULL;
};

template<class ContainerAllocator>
struct DataType< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wombot_node/AckermannDriveStamped";
  }

  static const char* value(const  ::wombot_node::AckermannDriveStamped_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "## Time stamped drive command for robots with Ackermann steering.\n\
#  $Id: AckermannDriveStamped.msg 1958 2012-02-11 02:35:54Z jack.oquin $\n\
\n\
Header          header\n\
AckermannDrive  drive\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: wombot_node/AckermannDrive\n\
## Driving command for a car-like vehicle using Ackermann steering.\n\
#  $Id: AckermannDrive.msg 1966 2012-02-11 17:52:11Z jack.oquin $\n\
\n\
# Assumes Ackermann front-wheel steering. The left and right front\n\
# wheels are generally at different angles. To simplify, the commanded\n\
# angle corresponds to the yaw of a virtual wheel located at the\n\
# center of the front axle, like on a tricycle.  Positive yaw is to\n\
# the left. (This is *not* the angle of the steering wheel inside the\n\
# passenger compartment.)\n\
#\n\
# Zero steering angle velocity means change the steering angle as\n\
# quickly as possible. Positive velocity indicates a desired absolute\n\
# rate of change either left or right. The controller tries not to\n\
# exceed this limit in either direction, but sometimes it might.\n\
#\n\
float32 steering_angle          # desired virtual angle (radians)\n\
float32 steering_angle_velocity # desired rate of change (radians/s)\n\
\n\
# Drive at requested speed, acceleration and jerk (the 1st, 2nd and\n\
# 3rd derivatives of position). All are measured at the vehicle's\n\
# center of rotation, typically the center of the rear axle. The\n\
# controller tries not to exceed these limits in either direction, but\n\
# sometimes it might.\n\
#\n\
# Speed is the desired scalar magnitude of the velocity vector.\n\
# Direction is forward unless the sign is negative, indicating reverse.\n\
#\n\
# Zero acceleration means change speed as quickly as\n\
# possible. Positive acceleration indicates a desired absolute\n\
# magnitude; that includes deceleration.\n\
#\n\
# Zero jerk means change acceleration as quickly as possible. Positive\n\
# jerk indicates a desired absolute rate of acceleration change in\n\
# either direction (increasing or decreasing).\n\
#\n\
float32 speed                   # desired forward speed (m/s)\n\
float32 acceleration            # desired acceleration (m/s^2)\n\
float32 jerk                    # desired jerk (m/s^3)\n\
\n\
";
  }

  static const char* value(const  ::wombot_node::AckermannDriveStamped_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::wombot_node::AckermannDriveStamped_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.drive);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AckermannDriveStamped_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wombot_node::AckermannDriveStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wombot_node::AckermannDriveStamped_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drive: ";
s << std::endl;
    Printer< ::wombot_node::AckermannDrive_<ContainerAllocator> >::stream(s, indent + "  ", v.drive);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WOMBOT_NODE_MESSAGE_ACKERMANNDRIVESTAMPED_H

